>> dari kode saya ambil dibawah ini, buatkan register.jsx, isinya 1 file ya jangan aneh aneh : ( buatkan tampilan aja jangan backend dulu ) ( tolong sekali rapiin username password nya sejajar kebawah jangan menyamping dan responsive design yg bagus

buatin form reset password dan gambarnya 50 50 kiri kanan, gambar dikiri, form reset di kanan, successnya uga gitu

buat 2 file : code login (reset_password.jsx) & reset_password_successfull.jsx ( setalh berhasil register )

>> note karena tanpa backend dulu karena mau test, anggap ja resi apapun berhasil dulu


--=-= code reset_password

import React from "react";
import { Navbar } from "@/components/layout/Navbar";
import { PasswordResetForm } from "@/components/auth/PasswordResetForm";

export const PasswordReset: React.FC = () => {
  return (
    <div className="flex flex-col overflow-hidden items-stretch bg-[#FCEDDA] pt-1.5 pb-[167px] px-[39px] max-md:pb-[100px] max-md:px-5">
      <Navbar />
      <main className="flex w-full items-stretch gap-[40px_54px] flex-wrap mt-11 max-md:max-w-full max-md:mt-10">
        <div className="flex items-center gap-[40px_130px] flex-wrap grow shrink basis-auto max-md:max-w-full">
          <img
            src="https://cdn.builder.io/api/v1/image/assets/cc19c8fb85a142d1a49f6d5b2b38adc8/e3eba738bee301607c6d12179c1ad9cc03bfe6a4?placeholderIfAbsent=true"
            alt="Password Reset Illustration"
            className="aspect-[0.89] object-contain w-[650px] self-stretch min-w-60 my-auto rounded-[15px] max-md:max-w-full"
          />
          <div className="self-stretch flex min-w-60 flex-col items-stretch w-[490px] my-auto max-md:max-w-full">
            <h1 className="text-black text-center text-5xl font-bold leading-none max-md:max-w-full max-md:text-[40px]">
              Reset Password
            </h1>
            <div className="flex w-full flex-col items-stretch font-normal mt-[46px] max-md:max-w-full max-md:mt-10">
              <PasswordResetForm />
            </div>
          </div>
        </div>
        <div className="items-center flex min-h-[50px] gap-2.5 w-[50px] h-[50px] bg-[#FCEDDA] p-2.5">
          <img
            src="https://cdn.builder.io/api/v1/image/assets/cc19c8fb85a142d1a49f6d5b2b38adc8/b8ac34b83f1bfe848adaf7c71f944bbffa00c242?placeholderIfAbsent=true"
            alt="Help Icon"
            className="aspect-[1] object-contain w-[30px] self-stretch my-auto"
          />
        </div>
      </main>
    </div>
  );
};

import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Form, FormControl, FormField, FormItem } from "@/components/ui/form";

const formSchema = z.object({
  email: z.string().email({ message: "Please enter a valid email address" }),
});

type FormValues = z.infer<typeof formSchema>;

export const PasswordResetForm: React.FC = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
    },
  });

  const onSubmit = async (data: FormValues) => {
    setIsSubmitting(true);
    try {
      // Here you would typically call an API to handle password reset
      console.log("Password reset requested for:", data.email);
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 1000));
    } catch (error) {
      console.error("Error requesting password reset:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="w-full">
        <div className="w-full whitespace-nowrap max-md:max-w-full">
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormControl>
                  <Input
                    {...field}
                    placeholder="Email"
                    className="self-stretch min-h-[29px] w-full gap-2.5 text-[15px] text-black py-[3px] border-b-[3px] border-black max-md:max-w-full focus-visible:ring-0 focus-visible:ring-offset-0 rounded-none bg-transparent"
                  />
                </FormControl>
              </FormItem>
            )}
          />
          <Button
            type="submit"
            disabled={isSubmitting}
            className="text-black self-stretch min-h-[55px] w-full gap-2.5 text-xl bg-[#FFDEB5] mt-[45px] px-2.5 py-[13px] rounded-[50px] max-md:max-w-full max-md:mt-10 hover:bg-[#FFD19F]"
          >
            {isSubmitting ? "SUBMITTING..." : "SUBMIT"}
          </Button>
        </div>
        <div className="self-center gap-2.5 text-base text-black leading-7 mt-[18px] p-2.5 text-center">
          Back to <span className="underline cursor-pointer">Sign In</span>
        </div>
      </form>
    </Form>
  );
};
import React from "react";
import { Button } from "@/components/ui/button";

export const Navbar: React.FC = () => {
  return (
    <div className="self-center flex min-h-20 w-full max-w-[1340px] items-center gap-[40px_100px] text-black justify-between flex-wrap py-2.5 max-md:max-w-full">
      <div className="self-stretch flex min-w-60 items-center gap-[22px] text-lg whitespace-nowrap text-center underline leading-[27px] w-[410px] my-auto">
        <div className="font-bold self-stretch w-[70px] my-auto">
          English
        </div>
        <div className="font-normal self-stretch w-[70px] my-auto">
          Bahasa
        </div>
      </div>
      <img
        src="https://cdn.builder.io/api/v1/image/assets/cc19c8fb85a142d1a49f6d5b2b38adc8/c5ecc94bded26a691941f6509f60b002e1c2813c?placeholderIfAbsent=true"
        alt="Logo"
        className="aspect-[1.42] object-contain w-[85px] self-stretch shrink-0 my-auto"
      />
      <div className="self-stretch flex min-w-60 items-center gap-[30px] text-[15px] font-medium my-auto">
        <div className="text-center self-stretch w-[70px] my-auto">
          SEARCH
        </div>
        <div className="text-center self-stretch w-[70px] my-auto">
          FORUM
        </div>
        <div className="text-center self-stretch w-[70px] my-auto">
          ARTICLES
        </div>
        <div className="self-stretch flex flex-col items-center text-base text-[#F7F7F7] justify-center w-[110px]">
          <Button
            variant="default"
            className="text-[#F7F7F7] self-stretch min-h-[30px] w-[90px] gap-2.5 bg-black px-2.5 py-[3px] rounded-[15px]"
          >
            SIGN IN
          </Button>
        </div>
      </div>
    </div>
  );
};
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
 
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
// Update this page (the content is just a fallback if you fail to update the page)

const Index = () => {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">Welcome to Your Blank App</h1>
        <p className="text-xl text-gray-600">Start building your amazing project here!</p>
      </div>
    </div>
  );
import React from "react";
import { PasswordReset } from "@/components/auth/PasswordReset";

const Index: React.FC = () => {
  return <PasswordRese

--=-= code reset_password successful

import React, { useState } from "react";

type Language = "English" | "Bahasa";

interface LanguageSelectorProps {
  initialLanguage?: Language;
  onLanguageChange?: (language: Language) => void;
}

export function LanguageSelector({
  initialLanguage = "English",
  onLanguageChange,
}: LanguageSelectorProps) {
  const [selectedLanguage, setSelectedLanguage] = useState<Language>(initialLanguage);

  const handleLanguageChange = (language: Language) => {
    setSelectedLanguage(language);
    if (onLanguageChange) {
      onLanguageChange(language);
    }
  };

  return (
    <div className="self-stretch flex min-w-60 items-center gap-[22px] text-lg whitespace-nowrap text-center underline leading-[27px] w-[410px] my-auto">
      <button
        onClick={() => handleLanguageChange("English")}
        className={`${
          selectedLanguage === "English" ? "font-bold" : "font-normal"
        } self-stretch w-[70px] my-auto`}
      >
        English
      </button>
      <button
        onClick={() => handleLanguageChange("Bahasa")}
        className={`${
          selectedLanguage === "Bahasa" ? "font-bold" : "font-normal"
        } self-stretch w-[70px] my-auto`}
      >
        Bahasa
      </button>
    </div>
  );
}

import React from "react";
import { CustomButton } from "./ui/custom-button";

export function ResetPasswordSuccess() {
  const handleSignIn = () => {
    // Handle sign in logic here
    console.log("Navigating to sign in page");
  };

  return (
    <div className="flex items-center gap-[40px_72px] flex-wrap mt-11 max-md:max-w-full max-md:mt-10">
      <img
        src="https://cdn.builder.io/api/v1/image/assets/cc19c8fb85a142d1a49f6d5b2b38adc8/e3eba738bee301607c6d12179c1ad9cc03bfe6a4?placeholderIfAbsent=true"
        alt="Password Reset Illustration"
        className="aspect-[0.89] object-contain w-[650px] self-stretch min-w-60 my-auto rounded-[15px] max-md:max-w-full"
      />
      
      <section className="self-stretch flex min-w-60 flex-col items-center w-[600px] my-auto max-md:max-w-full">
        <div className="max-w-full w-[600px] text-black text-center">
          <div className="flex flex-col items-stretch max-md:max-w-full">
            <img
              src="https://cdn.builder.io/api/v1/image/assets/cc19c8fb85a142d1a49f6d5b2b38adc8/8edf38f00b51ad73cad7df4a6fdb73e0fe7286fe?placeholderIfAbsent=true"
              alt="Success Icon"
              className="aspect-[1] object-contain w-[110px] self-center max-w-full"
            />
            
            <div className="flex w-full flex-col items-stretch justify-center mt-7 max-md:max-w-full">
              <h1 className="text-5xl font-bold leading-none max-md:max-w-full max-md:text-[40px]">
                Reset Password Requested
              </h1>
              
              <p className="self-center w-[479px] max-w-full gap-2.5 text-base font-normal leading-7 mt-1.5 p-2.5 max-md:max-w-full">
                We have sent instructions to reset your password to your
                email. Please check your inbox and follow the steps provided.
              </p>
            </div>
          </div>
        </div>
        
        <CustomButton 
          variant="primary" 
          size="large" 
          className="self-stretch w-[400px] max-w-full mt-[95px] max-md:mt-10"
          onClick={handleSignIn}
        >
          SIGN IN
        </CustomButton>
      </section>
    </div>
  );
}

import React from "react";
import { cn } from "@/lib/utils";

interface CustomButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: "primary" | "secondary";
  size?: "default" | "large" | "small";
  fullWidth?: boolean;
  children: React.ReactNode;
}

export function CustomButton({
  variant = "primary",
  size = "default",
  fullWidth = false,
  className,
  children,
  ...props
}: CustomButtonProps) {
  return (
    <button
      className={cn(
        "rounded font-semibold",
        variant === "primary" && "bg-black text-[#F7F7F7]",
        variant === "secondary" && "bg-[#FCEDDA] text-black border border-black",
        size === "default" && "px-4 py-2 text-base",
        size === "large" && "px-6 py-3 text-2xl min-h-[60px]",
        size === "small" && "px-3 py-1 text-sm",
        fullWidth && "w-full",
        className
      )}
      {...props}
    >
      {children}
    </button>
  );
}
// Update this page (the content is just a fallback if you fail to update the page)

const Index = () => {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">Welcome to Your Blank App</h1>
        <p className="text-xl text-gray-600">Start building your amazing project here!</p>
      </div>
    </div>
  );
};

export default Index;
import React from "react";
import { Navbar } from "@/components/Navbar";
import { ResetPasswordSuccess } from "@/components/ResetPasswordSuccess";

export default function Index() {
  return (
    <main className="flex flex-col overflow-hidden items-stretch bg-[#FCEDDA] pt-1.5 pb-[167px] px-[39px] max-md:pb-[100px] max-md:px-5">
      <Navbar />
      <ResetPasswordSuccess />
    </main>
  );